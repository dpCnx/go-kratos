// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.5.3
// - protoc             v3.21.10
// source: api/v1/demo.proto

package api

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationHelloServerSayHello = "/api.v1.HelloServer/SayHello"
const OperationHelloServerSayHello2 = "/api.v1.HelloServer/SayHello2"

type HelloServerHTTPServer interface {
	SayHello(context.Context, *HelloRequest) (*HelloResponse, error)
	SayHello2(context.Context, *HelloRequest) (*HelloResponse, error)
}

func RegisterHelloServerHTTPServer(s *http.Server, srv HelloServerHTTPServer) {
	r := s.Route("/")
	r.GET("/say-hello-get", _HelloServer_SayHello0_HTTP_Handler(srv))
	r.POST("/say-hello-post", _HelloServer_SayHello20_HTTP_Handler(srv))
}

func _HelloServer_SayHello0_HTTP_Handler(srv HelloServerHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in HelloRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationHelloServerSayHello)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SayHello(ctx, req.(*HelloRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*HelloResponse)
		return ctx.Result(200, reply)
	}
}

func _HelloServer_SayHello20_HTTP_Handler(srv HelloServerHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in HelloRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationHelloServerSayHello2)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SayHello2(ctx, req.(*HelloRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*HelloResponse)
		return ctx.Result(200, reply)
	}
}

type HelloServerHTTPClient interface {
	SayHello(ctx context.Context, req *HelloRequest, opts ...http.CallOption) (rsp *HelloResponse, err error)
	SayHello2(ctx context.Context, req *HelloRequest, opts ...http.CallOption) (rsp *HelloResponse, err error)
}

type HelloServerHTTPClientImpl struct {
	cc *http.Client
}

func NewHelloServerHTTPClient(client *http.Client) HelloServerHTTPClient {
	return &HelloServerHTTPClientImpl{client}
}

func (c *HelloServerHTTPClientImpl) SayHello(ctx context.Context, in *HelloRequest, opts ...http.CallOption) (*HelloResponse, error) {
	var out HelloResponse
	pattern := "/say-hello-get"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationHelloServerSayHello))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *HelloServerHTTPClientImpl) SayHello2(ctx context.Context, in *HelloRequest, opts ...http.CallOption) (*HelloResponse, error) {
	var out HelloResponse
	pattern := "/say-hello-post"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationHelloServerSayHello2))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
