// Code generated by protoc-gen-gin-http. DO NOT EDIT.
// versions:
// - protoc-gen-gin-http v1.0.0
// - protoc             v3.21.10
// source: api/v1/demo.proto

package api

import (
	context "context"
	gin "github.com/gin-gonic/gin"
)

var _ = new(context.Context)
var _ = gin.Version

const OperationHelloServerSayHello = "/api.v1.HelloServer/SayHello"
const OperationHelloServerSayHello2 = "/api.v1.HelloServer/SayHello2"

type HelloServerHTTPServer interface {
	SayHello(context.Context, *HelloRequest) (*HelloResponse, error)
	SayHello2(context.Context, *HelloRequest) (*HelloResponse, error)
}

func RegisterHelloServerHTTPServer(r gin.IRoutes, srv HelloServerHTTPServer, resp interface {
	Error(c *gin.Context, err error)
	Success(c *gin.Context, data interface{})
}, middlewares ...gin.HandlerFunc) {
	s := &HelloServer{
		server:      srv,
		router:      r,
		resp:        resp,
		middlewares: middlewares,
	}
	s.Register()
}

type HelloServer struct {
	server      HelloServerHTTPServer
	router      gin.IRoutes
	middlewares []gin.HandlerFunc
	resp        interface {
		Error(c *gin.Context, err error)
		Success(c *gin.Context, data interface{})
	}
}

func (r *HelloServer) Register() {
	r.router.GET("/say-hello-get", append(r.middlewares, r.SayHello)...)
	r.router.POST("/say-hello-post", append(r.middlewares, r.SayHello2)...)
}

func (r *HelloServer) SayHello(c *gin.Context) {
	var in HelloRequest
	if err := c.ShouldBind(&in); err != nil {
		r.resp.Error(c, err)
		return
	}
	out, err := r.server.SayHello(c.Request.Context(), &in)
	if err != nil {
		r.resp.Error(c, err)
		return
	}
	r.resp.Success(c, out)
	return
}

func (r *HelloServer) SayHello2(c *gin.Context) {
	var in HelloRequest
	if err := c.ShouldBind(&in); err != nil {
		r.resp.Error(c, err)
		return
	}
	out, err := r.server.SayHello2(c.Request.Context(), &in)
	if err != nil {
		r.resp.Error(c, err)
		return
	}
	r.resp.Success(c, out)
	return
}
